/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.jay.mainInventory;

import java.awt.print.PrinterException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author JRoat
 */
public class Main_Window extends javax.swing.JFrame {

    Connection connect = null;
    static String notConnected = "You must log in to make changes!";

    /**
     * Creates new form Main_Window
     */
    public Main_Window() {
        initComponents();
    }
//checking database connection, logging in with username and password

    public void MySqlConnection() {
        
        if (!(userPasswordTextBox.getPassword().equals("") || usernameTextBox.getText().equals(""))) {

            char[] convPass = userPasswordTextBox.getPassword();
            String pass = String.copyValueOf(convPass);
            String user = usernameTextBox.getText();
                try {
                    connect = DriverManager.getConnection("jdbc:mysql://encryption.ddns.net:3306", user, pass);
                    displayMessage.setText(displayMessage.getText() + "Sign in successfull!\n");
                    return;
                } catch (SQLException e) {
                    displayMessage.setText(displayMessage.getText() + "Attempted Remote Connection Failed:\n" + e + "\nAttempting Local\n");
                }
                
                try {
                    connect = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306", user, pass);
                    displayMessage.setText(displayMessage.getText() + "Sign in successfull!\n");
                } catch (SQLException ee) {
                    displayMessage.setText(displayMessage.getText() + "Attempted Local Connection Failed:\n" + ee + "\n");
                }
        }
    }
//getting data from database

    public ArrayList<InventoryMain> retrieveData() {
        ArrayList<InventoryMain> argList;
        argList = new ArrayList<>();
        try {
            String qry = "SELECT * FROM inventory.we_have";
            Statement stmnt = connect.createStatement();
            ResultSet rs = stmnt.executeQuery(qry);
            InventoryMain inv;
            while (rs.next()) {
                inv = new InventoryMain(rs.getInt("ItemKey"), rs.getString("ItemName"), rs.getDouble("ItemPrice"), rs.getInt("ItemQuantity"));
                argList.add(inv);
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
        return argList;
    }

    //filling jtable with data from database
    public void fillTable(boolean isSearch, ArrayList<InventoryMain> searchArray) {
        ArrayList<InventoryMain> argList;
        if (isSearch) {
            argList = searchArray;
        } else {
            argList = retrieveData();
        }
        DefaultTableModel tableModel = (DefaultTableModel) DataBaseDisplay.getModel();
        tableModel.setRowCount(0);
        Object[] col = new Object[4];
        for (int i = 0; i < argList.size(); i++) {
            col[0] = argList.get(i).getIdNumber();
            col[1] = argList.get(i).getItemName();
            col[2] = argList.get(i).getItemPrice();
            col[3] = argList.get(i).getItemQuantity();
            tableModel.addRow(col);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        usernameTextBox = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        userPasswordTextBox = new javax.swing.JPasswordField();
        jScrollPane1 = new javax.swing.JScrollPane();
        DataBaseDisplay = new javax.swing.JTable();
        logInButton = new javax.swing.JButton();
        logOutButton = new javax.swing.JButton();
        keyTextBox = new javax.swing.JTextField();
        nameTextBox = new javax.swing.JTextField();
        priceTextBox = new javax.swing.JTextField();
        quantityTextBox = new javax.swing.JTextField();
        addToDatabase = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        updateSelectedData = new javax.swing.JButton();
        deleteSelectedData = new javax.swing.JButton();
        Print_Table = new javax.swing.JButton();
        searchTextBox = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        displayMessage = new javax.swing.JTextArea();
        resetTextFields = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 153, 153));
        setForeground(java.awt.Color.lightGray);

        jLabel1.setText("User Name: ");
        jLabel1.setToolTipText("");

        usernameTextBox.setText("Encrypted");
        usernameTextBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameTextBoxActionPerformed(evt);
            }
        });

        jLabel2.setText("User Password: ");

        userPasswordTextBox.setText("P@$$W0rd");

        DataBaseDisplay.setAutoCreateRowSorter(true);
        DataBaseDisplay.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Key", "Item", "Price", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        DataBaseDisplay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DataBaseDisplayMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(DataBaseDisplay);

        logInButton.setText("Log In");
        logInButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logInButtonActionPerformed(evt);
            }
        });

        logOutButton.setText("Log Out");
        logOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logOutButtonActionPerformed(evt);
            }
        });

        addToDatabase.setText("ADD");
        addToDatabase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToDatabaseActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jLabel3.setText("Key:");

        jLabel4.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jLabel4.setText("Price:");

        jLabel5.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jLabel5.setText("Quantity:");

        jLabel6.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jLabel6.setText("Item");

        updateSelectedData.setText("UPDATE");
        updateSelectedData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateSelectedDataActionPerformed(evt);
            }
        });

        deleteSelectedData.setText("DELETE");
        deleteSelectedData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSelectedDataActionPerformed(evt);
            }
        });

        Print_Table.setText("PRINT TABLE");
        Print_Table.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Print_TableActionPerformed(evt);
            }
        });

        searchTextBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchTextBoxKeyReleased(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jLabel7.setText("Search:");

        displayMessage.setEditable(false);
        displayMessage.setColumns(20);
        displayMessage.setRows(5);
        displayMessage.setWrapStyleWord(true);
        displayMessage.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane2.setViewportView(displayMessage);

        resetTextFields.setText("RESET");
        resetTextFields.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetTextFieldsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(usernameTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(userPasswordTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(logInButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(logOutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(47, 47, 47)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)))
                                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(46, 46, 46)
                                        .addComponent(keyTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(priceTextBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(quantityTextBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(searchTextBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(addToDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(updateSelectedData, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deleteSelectedData, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(nameTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(resetTextFields, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(Print_Table, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(9, 9, 9)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(usernameTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(logInButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(logOutButton)
                            .addComponent(userPasswordTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(keyTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nameTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(priceTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(quantityTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(updateSelectedData, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deleteSelectedData, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addToDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                            .addComponent(Print_Table, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                            .addComponent(resetTextFields, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)))
                    .addComponent(jScrollPane2)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void usernameTextBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameTextBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_usernameTextBoxActionPerformed

    private void logInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logInButtonActionPerformed
        MySqlConnection();
        fillTable(false, null);
            
    }//GEN-LAST:event_logInButtonActionPerformed

    private void updateSelectedDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateSelectedDataActionPerformed
        if (connect == null) {
            JOptionPane.showMessageDialog(null, notConnected);
        } else if (!(keyTextBox.getText().equals("") || nameTextBox.getText().equals("") || quantityTextBox.getText().equals("")
                || priceTextBox.getText().equals(""))) {
            try {
                int oldKey = Integer.parseInt(keyTextBox.getText());
                //Connection connect = MySqlConnection();
                String qry = "UPDATE `inventory`.`we_have` SET `ItemKey` = ?, `ItemName` = ?, `ItemPrice` = ?, `ItemQuantity` = ? WHERE (`ItemKey` = ?)";
                PreparedStatement ps = connect.prepareStatement(qry);
                ps.setInt(1, Integer.parseInt(JOptionPane.showInputDialog("Would you like to change the key value? \n If you do, just change the value below.\n", oldKey)));
                ps.setString(2, nameTextBox.getText());
                ps.setDouble(3, Double.parseDouble(priceTextBox.getText()));
                ps.setInt(4, Integer.parseInt(quantityTextBox.getText()));
                ps.setInt(5, oldKey);

                int res = ps.executeUpdate();
                if (res >= 1) {
                    displayMessage.setText(displayMessage.getText() + "Updated item successfully!\n");
                } else {
                    JOptionPane.showMessageDialog(null, "Failed to update!");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
            resetAllTextFields();
            fillTable(false, null);
        } else {
            JOptionPane.showMessageDialog(null, "All fields are empty!");
        }
    }//GEN-LAST:event_updateSelectedDataActionPerformed

    private void addToDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToDatabaseActionPerformed
        if (connect == null) {
            JOptionPane.showMessageDialog(null, notConnected);
        } else if (!(keyTextBox.getText().equals("") || nameTextBox.getText().equals("") || quantityTextBox.getText().equals("")
                || priceTextBox.getText().equals(""))) {
            try {
                //Connection connect = MySqlConnection();
                String qry = "INSERT INTO `inventory`.`we_have` (`ItemKey`, `ItemName`, `ItemPrice`, `ItemQuantity`) VALUES "
                        + "(?,?,?,?)";
                PreparedStatement ps = connect.prepareStatement(qry);
                ps.setInt(1, Integer.parseInt(keyTextBox.getText()));
                ps.setString(2, nameTextBox.getText());
                ps.setDouble(3, Double.parseDouble(priceTextBox.getText()));
                ps.setInt(4, Integer.parseInt(quantityTextBox.getText()));

                int res = ps.executeUpdate();
                if (res >= 1) {
                    displayMessage.setText(displayMessage.getText() + "Item successfully added!\n");
                } else {
                    JOptionPane.showMessageDialog(null, "Failed to update!");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
            resetAllTextFields();
            fillTable(false, null);
        } else {
            JOptionPane.showMessageDialog(null, "All fields are empty!");
        }
    }//GEN-LAST:event_addToDatabaseActionPerformed

    private void deleteSelectedDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSelectedDataActionPerformed
        if (connect == null) {
            JOptionPane.showMessageDialog(null, notConnected);
        } else if (!(keyTextBox.getText().equals(""))) {
            try {
                //Connection connect = MySqlConnection();
                String qry = "DELETE FROM `inventory`.`we_have` WHERE (`ItemKey` = ?)";
                PreparedStatement ps = connect.prepareStatement(qry);
                ps.setInt(1, Integer.parseInt(keyTextBox.getText()));
                int res = ps.executeUpdate();
                if (res >= 1) {
                    displayMessage.setText(displayMessage.getText() + "Item deleted successfully!\n");
                } else {
                    JOptionPane.showMessageDialog(null, "Failed to delete!");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
            resetAllTextFields();
            fillTable(false, null);
        } else {
            JOptionPane.showMessageDialog(null, "Please enter an existing student key!");
        }
    }//GEN-LAST:event_deleteSelectedDataActionPerformed

    private void logOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logOutButtonActionPerformed
        try {
            connect.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }

        connect = null;
        DefaultTableModel dModel = (DefaultTableModel) DataBaseDisplay.getModel();
        DataBaseDisplay.removeAll();
        dModel.setRowCount(0);
        resetAllTextFields();
        displayMessage.setText(displayMessage.getText() + "Sign out successfull!\n");
    }//GEN-LAST:event_logOutButtonActionPerformed

    private void Print_TableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Print_TableActionPerformed
        try {
            DataBaseDisplay.print();
        } catch (PrinterException ex) {
            Logger.getLogger(Main_Window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_Print_TableActionPerformed

    public void showItemsToTextBox(int index) {
        if (connect != null) {
            keyTextBox.setText(Integer.toString(retrieveData().get(index).getIdNumber()));
            nameTextBox.setText(retrieveData().get(index).getItemName());
            priceTextBox.setText(Double.toString(retrieveData().get(index).getItemPrice()));
            quantityTextBox.setText(Integer.toString(retrieveData().get(index).getItemQuantity()));
        } else {
            JOptionPane.showMessageDialog(null, "Must not be logged in!");
        }

    }
    private void DataBaseDisplayMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DataBaseDisplayMouseClicked
        int indexToPass;
        indexToPass = (DataBaseDisplay.convertRowIndexToModel(DataBaseDisplay.getSelectedRow()));
        showItemsToTextBox(indexToPass);

    }//GEN-LAST:event_DataBaseDisplayMouseClicked

    private void searchTextBoxKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTextBoxKeyReleased
        if (connect != null) {
            ArrayList<InventoryMain> invSearch = new ArrayList<>();
            String searchFor = searchTextBox.getText();
            try {
                String qry = ("SELECT * FROM inventory.we_have WHERE itemname LIKE '%" + searchFor + "%'");
                Statement statement = connect.createStatement();
                ResultSet rs = statement.executeQuery(qry);
                InventoryMain invMain;
                while (rs.next()) {
                    invMain = new InventoryMain(rs.getInt(1), rs.getString("ItemName"), rs.getDouble("ItemPrice"), rs.getInt("ItemQuantity"));
                    invSearch.add(invMain);
                }
                fillTable(true, invSearch);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Not logged in!");
        }
    }//GEN-LAST:event_searchTextBoxKeyReleased

    private void resetTextFieldsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetTextFieldsActionPerformed
        resetAllTextFields();
    }//GEN-LAST:event_resetTextFieldsActionPerformed

    private void resetAllTextFields() {
        keyTextBox.setText("");
        nameTextBox.setText("");
        priceTextBox.setText("");
        quantityTextBox.setText("");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main_Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main_Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main_Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main_Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Main_Window().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable DataBaseDisplay;
    private javax.swing.JButton Print_Table;
    private javax.swing.JButton addToDatabase;
    private javax.swing.JButton deleteSelectedData;
    private javax.swing.JTextArea displayMessage;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField keyTextBox;
    private javax.swing.JButton logInButton;
    private javax.swing.JButton logOutButton;
    private javax.swing.JTextField nameTextBox;
    private javax.swing.JTextField priceTextBox;
    private javax.swing.JTextField quantityTextBox;
    private javax.swing.JButton resetTextFields;
    private javax.swing.JTextField searchTextBox;
    private javax.swing.JButton updateSelectedData;
    private javax.swing.JPasswordField userPasswordTextBox;
    private javax.swing.JTextField usernameTextBox;
    // End of variables declaration//GEN-END:variables
}
